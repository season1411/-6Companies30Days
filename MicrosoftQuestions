
// ************ Question 2     Combination Sum with Twist   ************************

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {

        List<List<Integer>> ans=new ArrayList<>();

        //corner cases

        if(k<=0 || n<=0 || k>n)
        {
            return ans;
        }

        // the upper bound of n
        if(n>(19-k)*k/2)
        {
            return ans;
        }

        backtrack(ans,new ArrayList<>(),1,k,n);
        return ans;

    }

    public void backtrack(List<List<Integer>> res,List<Integer> path,int start,int k,int target)
    {

        if(k<0 || target<0){
            return;
        }

        if(k==0 && target==0)
        {
            res.add(new ArrayList<>(path));
        }

        for(int i=start;i<=9;i++){

            //trim
            if(i>target){
                break;
            }

            //trim
            if(target-i==0 && k>1){
                break;
            }

            path.add(i);
            backtrack(res,path,i+1,k-1,target-i);
            path.remove(path.size()-1);
        }

    }      
    
}



// ****************  Question 3      Bulls and Cows    **************** 

class Solution {
    public String getHint(String secret, String guess) {

        int bulls=0;
        int cows=0;

        int numbers[]=new int[10];

        for(int i=0;i<secret.length();i++){
            if(secret.charAt(i)==guess.charAt(i))
                bulls++;
            else
            {
                if(numbers[secret.charAt(i)-'0']++<0)
                    cows++;
                if(numbers[guess.charAt(i)-'0']-->0)
                    cows++;

            }
            

        }

        return bulls+"A"+cows+"B";
        
    }
}




// ************** Question 4    Return Maximum Number of Rotation   ******************

class Solution {
    public int maxRotateFunction(int[] nums) {

        int F=0;
        int S=0;

        for(int i=0;i<nums.length;i++)
        {
            F= F + (nums[i]*i);
            S=S+nums[i];

        }

        int max=F; //this is F0
        int n=nums.length;

        for(int i=n-1;i>=1;i--)
        {
            F=F+S-n*nums[i];
            max=Math.max(max,F);
        }

        return max;
        
    }
}



//  ******************** Question 5        Largest Divisible Subset        ******************

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int[] lis = new int[nums.length];
        int[] hash = new int[nums.length];
        Arrays.fill(hash, -1);
        Arrays.sort(nums);
        int maxIdx = 0;
        for(int i=1; i<nums.length; ++i){
            for(int j=0; j<i; ++j){
                if(nums[i]%nums[j] == 0 && lis[j]+1 > lis[i]){
                    lis[i] = lis[j]+1;
                    hash[i] = j;
                    if(lis[maxIdx] < lis[i])
                        maxIdx = i;
                }
            }
        }
        
        return buildSeq(nums, hash, maxIdx);
    }
    
    public List<Integer> buildSeq(int[] nums, int[] lis, int idx){
        List<Integer> seq = new ArrayList<>();
        while(idx >=0){
            seq.add(nums[idx]);
            idx = lis[idx];
        }
        return seq;
    }
}

