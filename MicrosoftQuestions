
//  *********** Question 1 Reverse Polish Notaion    *********************

class Solution {
    public int evalRPN(String[] tokens) {

         Stack<Integer> stack=new Stack();
        String oprtr="+-*/";
        for(String s:tokens)
        {
            if(oprtr.contains(s)&&!stack.isEmpty()){
              int op1=stack.pop();
              int op2=stack.pop();
              int ans=help(op2,s,op1);
              stack.push(ans);
            }else{
                stack.push(Integer.parseInt(s));
            }
        }
        return stack.pop();

    }
    public int help(int op2,String s,int op1)
    {
        if(s.equals("+"))return op2+op1;
        else if(s.equals("-"))return op2-op1;
        else if(s.equals("/"))return op2/op1;
        return op2*op1;
    }
        
    
}



// ************ Question 2     Combination Sum with Twist   ************************

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {

        List<List<Integer>> ans=new ArrayList<>();

        //corner cases

        if(k<=0 || n<=0 || k>n)
        {
            return ans;
        }

        // the upper bound of n
        if(n>(19-k)*k/2)
        {
            return ans;
        }

        backtrack(ans,new ArrayList<>(),1,k,n);
        return ans;

    }

    public void backtrack(List<List<Integer>> res,List<Integer> path,int start,int k,int target)
    {

        if(k<0 || target<0){
            return;
        }

        if(k==0 && target==0)
        {
            res.add(new ArrayList<>(path));
        }

        for(int i=start;i<=9;i++){

            //trim
            if(i>target){
                break;
            }

            //trim
            if(target-i==0 && k>1){
                break;
            }

            path.add(i);
            backtrack(res,path,i+1,k-1,target-i);
            path.remove(path.size()-1);
        }

    }      
    
}



// ****************  Question 3      Bulls and Cows    **************** 

class Solution {
    public String getHint(String secret, String guess) {

        int bulls=0;
        int cows=0;

        int numbers[]=new int[10];

        for(int i=0;i<secret.length();i++){
            if(secret.charAt(i)==guess.charAt(i))
                bulls++;
            else
            {
                if(numbers[secret.charAt(i)-'0']++<0)
                    cows++;
                if(numbers[guess.charAt(i)-'0']-->0)
                    cows++;

            }
            

        }

        return bulls+"A"+cows+"B";
        
    }
}




// ************** Question 4    Return Maximum Number of Rotation   ******************

class Solution {
    public int maxRotateFunction(int[] nums) {

        int F=0;
        int S=0;

        for(int i=0;i<nums.length;i++)
        {
            F= F + (nums[i]*i);
            S=S+nums[i];

        }

        int max=F; //this is F0
        int n=nums.length;

        for(int i=n-1;i>=1;i--)
        {
            F=F+S-n*nums[i];
            max=Math.max(max,F);
        }

        return max;
        
    }
}



//  ******************** Question 5        Largest Divisible Subset        ******************

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int[] lis = new int[nums.length];
        int[] hash = new int[nums.length];
        Arrays.fill(hash, -1);
        Arrays.sort(nums);
        int maxIdx = 0;
        for(int i=1; i<nums.length; ++i){
            for(int j=0; j<i; ++j){
                if(nums[i]%nums[j] == 0 && lis[j]+1 > lis[i]){
                    lis[i] = lis[j]+1;
                    hash[i] = j;
                    if(lis[maxIdx] < lis[i])
                        maxIdx = i;
                }
            }
        }
        
        return buildSeq(nums, hash, maxIdx);
    }
    
    public List<Integer> buildSeq(int[] nums, int[] lis, int idx){
        List<Integer> seq = new ArrayList<>();
        while(idx >=0){
            seq.add(nums[idx]);
            idx = lis[idx];
        }
        return seq;
    }
}


//  **********  Question 6  Perfect Rectangle   ***********

class Solution {
    public boolean isRectangleCover(int[][] rectangles) {
        if (rectangles.length == 0 || rectangles[0].length == 0) return false;

        int x1 = Integer.MAX_VALUE;
        int x2 = Integer.MIN_VALUE;
        int y1 = Integer.MAX_VALUE;
        int y2 = Integer.MIN_VALUE;
        
        HashSet<String> set = new HashSet<String>();
        int area = 0;
        
        for (int[] rect : rectangles) {
            x1 = Math.min(rect[0], x1);
            y1 = Math.min(rect[1], y1);
            x2 = Math.max(rect[2], x2);
            y2 = Math.max(rect[3], y2);
            
            area += (rect[2] - rect[0]) * (rect[3] - rect[1]);
            
            String s1 = rect[0] + " " + rect[1];
            String s2 = rect[0] + " " + rect[3];
            String s3 = rect[2] + " " + rect[3];
            String s4 = rect[2] + " " + rect[1];
            
            if (!set.add(s1)) set.remove(s1);
            if (!set.add(s2)) set.remove(s2);
            if (!set.add(s3)) set.remove(s3);
            if (!set.add(s4)) set.remove(s4);
        }
        
        if (!set.contains(x1 + " " + y1) || !set.contains(x1 + " " + y2) || !set.contains(x2 + " " + y1) || !set.contains(x2 + " " + y2) || set.size() != 4) return false;
        
        return area == (x2-x1) * (y2-y1);
        
        
    }
}

//  **************    Question 7   Scheduling  Courses  ***********

class Solution {
    public boolean canFinish(int n, int[][] prerequisites) {

        ArrayList<Integer>[] G=new ArrayList[n];
        int degree[]=new int[n];
        ArrayList<Integer> bfs=new ArrayList();

        for(int i=0;i<n;i++)
            G[i]=new ArrayList<Integer>();
        for(int e[]:prerequisites)
        {
            G[e[1]].add(e[0]);
            degree[e[0]]++;
        }   

        for(int i=0;i<n;i++)
            if(degree[i]==0)
                bfs.add(i);

        for(int i=0;i<bfs.size();i++)
            for(int j:G[bfs.get(i)])
                if(--degree[j]==0)
                    bfs.add(j);

        return bfs.size()==n;                     
        
    }
}

//  ************  Question 8  Profitable path in a tree 

class Solution {

    static int [] par;
    static int result; 
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        par = new int [amount.length];
        List<List<Integer>> adj = new ArrayList<>();
        result = (int)(-1e9);
        for(int i = 0; i < amount.length; i++) adj.add(new ArrayList<>());
        for(int []edge: edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        setPar(0, adj, -1, par);
        Map<Integer, Integer> bobDist = new HashMap<>();
        int cur = bob, cnt = 0;
        while(cur != par[cur]){
            bobDist.put(cur, cnt++);
            cur = par[cur];
        }
        getResult(0, adj, bobDist, 0, amount, -1, amount[0]);
        return result;
    }

    static void getResult(int node, List<List<Integer>> adj, Map<Integer, Integer> bobDist,
                         int dist, int[] amount, int p, int income) {
        int ans = amount[node];
        boolean flag = true;
        for(int child : adj.get(node)){
            if(child != p){
                if(bobDist.containsKey(child) && dist+1 == bobDist.get(child))
                    getResult(child, adj, bobDist, dist+1, amount, node, amount[child]/2 + income);
                else if(bobDist.get(child) == null || dist + 1 < bobDist.get(child))
                    getResult(child, adj, bobDist, dist+1, amount, node, amount[child] + income);
                else getResult(child, adj, bobDist, dist+1, amount, node, income);
                flag = false;
            }
        }
        if(flag){
            //leaf node.
            result = Math.max(result, income);
        }
    }

    static void setPar(int cur, List<List<Integer>> adj, int p, int [] par){
        for(int child : adj.get(cur)){
            if(child != p){
                par[child] = cur;
                setPar(child, adj, cur, par);
            }
        }
    }
}


//   **************   Question 9     Number of pairs satisfying inequality   *****************

class Solution {
    public long numberOfPairs(int[] nums1, int[] nums2, int diff) {

        int n = nums1.length;
        List<Integer> diffList = new ArrayList<>();
        long res = 0;
        for (int i = 0; i < n; i++) {
            int curDiff = nums1[i] - nums2[i];
            int target  = curDiff + diff; 
            res += countSmallerEqual(diffList, target);
            diffList.add((int) countSmallerEqual(diffList, curDiff), curDiff);
        }
        return res;
    }
    
    private long countSmallerEqual(List<Integer> diffList, int target) {
        int left = 0, right = diffList.size(); 
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (diffList.get(mid) <= target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return (long)left;
        
    }
}


//  **********  Question 10    Shortest Unsorted Continuous Subarray   ***************

class Solution {
    public int findUnsortedSubarray(int[] nums) {

        int n = nums.length, beg = -1, end = -2, min = nums[n-1], max = nums[0];
    for (int i=1;i<n;i++) {
      max = Math.max(max, nums[i]);
      min = Math.min(min, nums[n-1-i]);
      if (nums[i] < max) end = i;
      if (nums[n-1-i] > min) beg = n-1-i; 
    }
    return end - beg + 1;
        
    }
}


//  ********  Question 11    Number of ways to arrive at a destination   ******************

class Solution {
    public int countPaths(int n, int[][] roads) {

 final long MODULO = 1000000007;
        List<int[]>[] adj = new List[n];
        Arrays.setAll(adj, x -> new ArrayList<>());
        for (int[] r : roads) { // populate adjacency lists
            adj[r[0]].add(new int[]{r[1], r[2]});
            adj[r[1]].add(new int[]{r[0], r[2]});
        }
        long[] cost = new long[n], paths = new long[n];
        Arrays.fill(cost, -1); // -1 -> not visited
        Queue<long[]> q = new PriorityQueue<>((l, r) -> Long.compare(l[1], r[1])); // [node, cost]
        q.offer(new long[]{0,0});
        paths[0] = 1; // to make path accumulation work
        cost[0] = 0;
        
        while (!q.isEmpty()) {
            long[] f = q.poll();
            int fnode = (int) f[0];
            if (fnode == n - 1)
                return (int)(paths[fnode] % MODULO);
            for (int[] ch : adj[fnode]) {
                long newCost = f[1] + ch[1];
                if (newCost == cost[ch[0]]) // add all paths from the parent node
                    paths[ch[0]] += paths[fnode] % MODULO;
                if (cost[ch[0]] == -1 || newCost < cost[ch[0]]) {
                    paths[ch[0]] = paths[fnode]; // all previous paths are irrelevant
                    q.offer(new long[]{ch[0], newCost});
                    cost[ch[0]] = newCost;
                }
            }
        }
        return -1; // shouldn't get here
        
    }
}



//  *************    Question 12     Longest Happy Prefix    *****************

class Solution {
    public String longestPrefix(String s) {
        
        int n = s.length();
        int[] lps = new int[n];
        for (int i = 1, j = 0; i < n; i++) {
            while (j > 0 && s.charAt(i) != s.charAt(j)) j = lps[j-1];
            if (s.charAt(i) == s.charAt(j)) lps[i] = ++j;
        }
        return s.substring(0, lps[n-1]);
    }
    
}



//    **************    Question 13      Seat Arrangement in a SpiceJet  ****************




 
        



